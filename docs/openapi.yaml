openapi: 3.0.0
info:
  title: Restaurant API
  version: 1.0.0
  description: API for managing users, menu items, categories, and authentication in the restaurant system.
  contact:
    name: Ahmed Shehab
    email: a.shehab.biomedeng@gmail.com
    url: https://www.linkedin.com/in/ahmed-shehab-engineering/
    x-github: https://github.com/AhmedShehab1
  
servers:
  - url: http://localhost:8000/
    description: Local Development Server
paths:
  /api/groups/manager/users:
    post:
      summary: Add a user to the manager group
      description: Requires an admin token to add a user to the manager group. Optionally, an email can also be provided.
      tags:
        - User Management
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username to add to the manager group.
                email:
                  type: string
                  description: The email of the user (optional).
              required:
                - username
      responses:
        200:
          description: User successfully added to the manager group.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User added to Managers group
        400:
          description: Bad Request if username is not provided.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Username is required
      security:
        - TokenAuth: []
    get:
      summary: Get a list of manager group users
      description: Requires an admin token to retrieve users in the manager group.
      tags:
        - User Management
      responses:
        200:
          description: List of users in the manager group.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 4
                  next:
                    type: string
                    nullable: true
                    example: null
                  previous:
                    type: string
                    nullable: true
                    example: null
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        username:
                          type: string
                          example: Adrian
                        email:
                          type: string
                          example: adrian@littlelemon.com
      security:
        - TokenAuth: []


  /api/menu-items:
    post:
      summary: Add a menu item
      description: Admins can add menu items by providing the required data.
      tags:
        - Menu Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the menu item.
                price:
                  type: number
                  description: Price of the menu item.
                  format: float
                featured:
                  type: boolean
                  description: Indicates if the item is featured.
                category:
                  type: object
                  description: The category of the menu item.
                  properties:
                    id:
                      type: integer
                      description: ID of the category.
                    slug:
                      type: string
                      description: Slug of the category.
                    title:
                      type: string
                      description: Title of the category.
              required:
                - title
                - price
                - featured
                - category
      responses:
        201:
          description: Menu item added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 11
                  next:
                    type: string
                    nullable: true
                    example: null
                  previous:
                    type: string
                    nullable: true
                    example: http://localhost:8000/api/menu-items?page=2
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 13
                        title:
                          type: string
                          example: Lemon And Mint Drink
                        price:
                          type: string
                          example: "10.00"
                        featured:
                          type: boolean
                          example: true
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            slug:
                              type: string
                              example: Desserts
                            title:
                              type: string
                              example: Desserts
    get:
      summary: Browse menu items
      tags:
        - Menu
      description: Allows customers to browse all menu items, paginate results, search by category, and sort by price.
      parameters:
        - name: search
          in: query
          description: Search menu items by category.
          schema:
            type: string
        - name: page
          in: query
          description: Paginate through menu items.
          schema:
            type: integer
        - name: ordering
          in: query
          description: Sort menu items by price (ascending or descending).
          schema:
            type: string
      responses:
        '200':
          description: A list of menu items.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        title:
                          type: string
                        price:
                          type: string
                        featured:
                          type: boolean
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                            slug:
                              type: string
                            title:
                              type: string

    
      security:
       - TokenAuth: []


  /api/categories:
    post:
      summary: Add a category
      description: Admins can add new categories.
      tags:
        - Category Management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                slug:
                  type: string
                  description: Slug for the category.
              required:
                - slug
      responses:
        201:
          description: Category added successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 5
                  next:
                    type: string
                    nullable: true
                    example: null
                  previous:
                    type: string
                    nullable: true
                    example: null
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        slug:
                          type: string
                          example: Main
                          
        
      security: 
        - TokenAuth: []
    get:
      summary: Browse all categories
      tags:
        - Category
      description: Allows customers to browse all available categories.
      responses:
        '200':
          description: A list of categories.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        slug:
                          type: string
                        title:
                          type: string
      security:
        - TokenAuth: []

        
  /api/menu-items/{id}:
    patch:
      summary: Update a menu item
      tags:
        - Menu Management
      description: Allows managers to update the "item of the day" status by setting the `featured` field to true or false.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the menu item to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                featured:
                  type: boolean
                  description: Indicates whether the item is featured or not.
      responses:
        '200':
          description: The menu item was successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  title:
                    type: string
                  price:
                    type: string
                  featured:
                    type: boolean
                  category:
                    type: object
                    properties:
                      id:
                        type: integer
                      slug:
                        type: string
                      title:
                        type: string
  /api/groups/delivery-crew/users:
    post:
      summary: Assign users to the delivery crew
      tags:
        - User Management
      description: Allows managers to assign users to the delivery crew group.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: Username of the user to be assigned.
      responses:
        '200':
          description: User successfully added to the delivery crew.
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  username:
                    type: string
                  email:
                    type: string
        '404':
          description: No matching user found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    
      security: 
          - TokenAuth: []
        
    get:
      summary: List delivery crew members
      tags:
        - User Management
      description: Retrieves a list of users in the delivery crew group.
      responses:
        '200':
          description: A list of delivery crew members.
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                  next:
                    type: string
                    nullable: true
                  previous:
                    type: string
                    nullable: true
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                        username:
                          type: string
                        email:
                          type: string
      
      security: 
        - TokenAuth: []
        
  /api/orders/{id}:
    patch:
      summary: Assign orders to delivery crew
      tags: 
        - Order Management
      description: Allows managers to assign orders to delivery crew members.
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the order to update.
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                delivery_crew:
                  type: integer
                  description: ID of the delivery crew member to assign.
      responses:
        '200':
          description: Order successfully assigned.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
    get:
      summary: View orders for delivery crew
      tags:
        - Orders
      description: Allows delivery crew members to view their assigned orders.
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
      responses:
        '200':
          description: A list of orders assigned to the delivery crew.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    status:
                      type: boolean
                    delivery_crew:
                      type: integer
  /auth/users/:
    post:
      summary: Register new user
      tags:
        - Authentication
      description: Allows new users to register by providing their username, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
                email:
                  type: string
      responses:
        '201':
          description: User successfully registered.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    type: string
                  username:
                    type: string
                    
  /auth/token/login/:
    post:
      summary: User Login
      description: Authenticate using a username and password to obtain an auth token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: User's username.
                password:
                  type: string
                  description: User's password.
              required:
                - username
                - password
      responses:
        200:
          description: Successful login response with an auth token.
          content:
            application/json:
              schema:
                type: object
                properties:
                  auth_token:
                    type: string
                    description: Authentication token for accessing protected endpoints.
                    example: d4746ebb557594f21365f52f03bef2d4a5a9527d
        401:
          description: Unauthorized - Invalid credentials or user not verified.
          content:
            application/json:
              schema:
                type: object
                properties:
                  non_field_errors:
                    type: array
                    items:
                      type: string
                    description: List of authentication errors.
                    example:
                      - "Unable to log in with provided credentials."

                    
  /api/cart/menu-items:
    post:
      summary: Add menu items to the cart
      tags:
        - Cart
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                menuitem:
                  type: integer
                  example: 8
                unit_price:
                  type: number
                  format: float
                  example: 6.00
                quantity:
                  type: integer
                  example: 5
      responses:
        '200':
          description: Item added to cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Item added to cart!"
                  count:
                    type: integer
                    example: 1
                  next:
                    type: string
                    nullable: true
                    example: null
                  previous:
                    type: string
                    nullable: true
                    example: null
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        menuitem:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 8
                            title:
                              type: string
                              example: "Tiramisu"
                            price:
                              type: string
                              example: "6.00"
                        quantity:
                          type: integer
                          example: 5
                        price:
                          type: string
                          example: "30.00"
    get:
      summary: Get items in the cart
      tags:
        - Cart
      responses:
        '200':
          description: List of items in the cart
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 1
                  next:
                    type: string
                    nullable: true
                    example: null
                  previous:
                    type: string
                    nullable: true
                    example: null
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        menuitem:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 8
                            title:
                              type: string
                              example: "Tiramisu"
                            price:
                              type: string
                              example: "6.00"
                        quantity:
                          type: integer
                          example: 5
                        price:
                          type: string
                          example: "30.00"

  /api/cart/orders:
    post:
      summary: Place an order
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                  format: date
                  example: "2022-11-16"
      responses:
        '200':
          description: Order placed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Your order has been placed! Your order number is 34"
                  order:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 27
                      user:
                        type: object
                        properties:
                          username:
                            type: string
                            example: "Bob"
                      total:
                        type: string
                        example: "20.00"
                      status:
                        type: boolean
                        example: false
                      delivery_crew:
                        type: integer
                        example: 3
                      date:
                        type: string
                        format: date
                        example: "2023-01-06"
    get:
      summary: Get customer orders
      tags:
        - Orders
      responses:
        '200':
          description: List of customer orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 7
                  next:
                    type: string
                    nullable: true
                    example: null
                  previous:
                    type: string
                    nullable: true
                    example: null
                  results:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 27
                        user:
                          type: object
                          properties:
                            username:
                              type: string
                              example: "Bob"
                        total:
                          type: string
                          example: "20.00"
                        status:
                          type: boolean
                          example: false
                        delivery_crew:
                          type: integer
                          example: 3
                        date:
                          type: string
                          format: date
                          example: "2023-01-06"

components:
  securitySchemes:
    TokenAuth:
      type: apiKey
      in: header
      name: Authorization
